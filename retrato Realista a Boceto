# Importamos la biblioteca PyTorch para manejar redes neuronales y procesamiento de tensores.
import torch
import torchvision.transforms as transforms
from PIL import Image
from torchvision import models
import matplotlib.pyplot as plt

def load_model():
    # Cargamos un modelo de segmentación preentrenado basado en DeepLabV3 con ResNet101
    model = models.segmentation.deeplabv3_resnet101(pretrained=True).eval()
    return model

def transform_image(image_path):
    # Convertimos la imagen en un tensor normalizado adecuado para la red neuronal
    transform = transforms.Compose([
        transforms.Resize((512, 512)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])
    image = Image.open(image_path).convert("RGB")
    
    # Mostrar la imagen antes de procesarla
    plt.imshow(image)
    plt.axis('off')
    plt.show()

    return transform(image).unsqueeze(0)  # Retorna el tensor transformado

def generate_sketch(image_path):
    # Aplicamos el modelo de segmentación a la imagen y mostramos el resultado como un boceto
    model = load_model()
    
    input_tensor = transform_image(image_path)
    
    with torch.no_grad():
        output = model(input_tensor)['out'][0]

    output_predictions = torch.argmax(output, dim=0).byte().cpu().numpy()
    
    # Convertimos la salida en una imagen en escala de grises para visualizar el resultado
    plt.imshow(output_predictions, cmap='gray')
    plt.axis('off')
    plt.show()

# Ejecutar el script con una imagen de ejemplo
generate_sketch("img.jfif")
